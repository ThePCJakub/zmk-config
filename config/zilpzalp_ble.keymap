#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

&lt { quick_tap_ms = <200>; };

&soft_off { hold-time-ms = <5000>; };

#define COMBO_TIMEOUT 30

/ {
    combos {
        compatible = "zmk,combos";

        combo_v {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 1>;
            bindings = <&kp V>;
            layers = <0>;
	    require-prior-idle-ms = <50>;
        };

        combo_q {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <1 2>;
            bindings = <&kp Q>;
            layers = <0>;
	    require-prior-idle-ms = <50>;
        };

        combo_z {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <18 19>;
            bindings = <&kp Z>;
            layers = <0>;
	    require-prior-idle-ms = <50>;
        };

        combo_apos {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <6 7>;
            bindings = <&kp APOS>;
	    layers = <0>;
	    require-prior-idle-ms = <50>;
        };

        combo_grave {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <5 6>;
            bindings = <&kp GRAVE>;
	    layers = <0>;
	    require-prior-idle-ms = <50>;
        };

        combo_fwslash {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <22 23>;
            bindings = <&kp SLASH>;
	    layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_bkslash {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <21 22>;
            bindings = <&kp BACKSLASH>;
	    layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_lt {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <3 12>;
            bindings = <&kp LT>;
	    layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_gt {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <4 13>;
            bindings = <&kp GT>;
	    layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_lpar {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <2 11>;
            bindings = <&kp LPAR>;
	    layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_lbkt {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <1 10>;
            bindings = <&kp LBKT>;
	    layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_lbrc {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 9>;
            bindings = <&kp LBRC>;
	    layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_rpar {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <5 14>;
            bindings = <&kp RPAR>;
	    layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_rbkt {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <6 15>;
            bindings = <&kp RBKT>;
	    layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_rbrc {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <7 16>;
            bindings = <&kp RBRC>;
	    layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_bspc {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <14 21>;
            bindings = <&kp BSPC>;
	    layers = <0 2>;
	    require-prior-idle-ms = <0>;
        };

        combo_del {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <15 22>;
            bindings = <&kp DEL>;
	    layers = <0 2>;
	    require-prior-idle-ms = <0>;
        };

        combo_enter {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <14 16>;
            bindings = <&kp ENTER>;
	    layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_esc {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <9 11>;
            bindings = <&kp ESCAPE>;
	    layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_tab {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <9 10>;
            bindings = <&kp TAB>;
	    layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_lshift {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <10 11>;
            bindings = <&sk LEFT_SHIFT>;
            layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_rshift {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <14 15>;
            bindings = <&sk RIGHT_SHIFT>;
            layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_capsword {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <11 14>;
            bindings = <&caps_word>;
            layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_caps {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 7>;
            bindings = <&kp CAPSLOCK>;
            layers = <0 2>;
	    require-prior-idle-ms = <50>;
        };

        combo_lclk {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <11 20>;
            bindings = <&mkp LCLK>;
	    layers = <0 2>;
	    require-prior-idle-ms = <0>;
        };

        combo_rclk {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <10 19>;
            bindings = <&mkp RCLK>;
	    layers = <0 2>;
	    require-prior-idle-ms = <0>;
        };

        combo_mclk {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <9 18>;
            bindings = <&mkp MCLK>;
	    layers = <0 2>;
	    require-prior-idle-ms = <0>;
        };

        combo_softoff {
            timeout-ms = <100>;
            key-positions = <21 22 23>;
            bindings = <&soft_off>;
	    layers = <0 3>;
	    require-prior-idle-ms = <500>;
        };

        combo_boot {
            timeout-ms = <100>;
            key-positions = <18 19 20>;
            bindings = <&bootloader>;
	    layers = <3>;
	    require-prior-idle-ms = <500>;
        };
    };

    behaviors {
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;

            // global-quick-tap;

            bindings = <&kp>, <&kp>;

            // opposite side hand keys

            // hold-trigger-key-positions = <4 5 6 7 13 14 15 16 17 21 22 23 26 27>;
        };

        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;

            // global-quick-tap;

            bindings = <&kp>, <&kp>;

            // opposite side hand keys

            // hold-trigger-key-positions = <0 1 2 3 8 9 10 11 12 18 19 20 24 25>;
        };

        dotcol: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COL";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comsem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_SEM";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

//     __________________________  __________________________
//    /     0  |  1  |  2  |  3  \/   4 |   5 |   6 |   7    \
// |  8  |  9  | 10  | 11  | 12  /\  13 |  14 |  15 |  16 | 17  |
//    \    18  | 19  | 20    /        \    21 |  22 |  23   /
//          \    24  | 25  /            \  26 |  27    /
//           --------------              --------------

    keymap {
        compatible = "zmk,keymap";

        aptmak {
	    bindings = <
				&kp W		&kp F		&kp P		&kp B			&kp J		&kp L		&kp U		&kp Y
		&hl LALT R	&hl LCTRL S	&hl LSHFT T	&hl LGUI H	&kp K			&kp X		&hr RGUI N	&hr RSHFT A	&hr RCTRL I	&hr LALT O
				&kp C		&kp G		&kp D							&kp M		&comsem		&dotcol

								&none		&lt 1 SPACE		&lt 2 E		&none			
	    >;
        };

        nav {
            bindings = <
				&kp LA(F4)	&kp LG(LEFT)	&kp LG(RIGHT)	&kp LC(W)		&kp PAGE_UP	&none			&none			&none
		&kp LC(Z)	&kp LC(LS(T))	&kp LS(LC(TAB))	&kp LS(TAB)	&kp LC(A)		&kp PAGE_DOWN	&kp LEFT		&kp DOWN		&kp UP		&kp RIGHT
				&kp LC(X)	&kp LC(C)	&mt LS(LC(V)) LS(INSERT)				&kp HOME		&none			&kp END

								&trans		&trans			&mo 2		&trans
            >;
        };

        symnum {
	    bindings = <
				&kp EXCL	&kp AT_SIGN	&kp POUND	&kp DOLLAR		&kp EQUAL	&kp N1		&kp N2		&kp N3
		&kp SEMI	&kp STAR	&kp UNDER	&kp MINUS	&kp PIPE		&kp N0		&kp N4		&kp N5		&kp N6		&kp COLON
				&kp PLUS	&kp PERCENT	&kp AMPS						&kp N7		&kp N8		&kp N9

								&trans		&mo 1			&trans		&trans
	    >;
        };

        fun {
	    bindings = <
				&kp F1		&kp F2		&kp F3		&kp F10			&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3
		&kp F12		&kp F4		&kp F5		&kp F6		&kp F11			&out OUT_TOG	&kp C_PP	&kp C_VOL_DN	&kp C_VOL_UP	&kp C_MUTE
				&kp F7		&kp F8		&kp F9							&bootloader	&soft_off	&bt BT_CLR

								&trans		&trans			&trans		&trans
	    >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fun {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };
};
