#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&lt { quick_tap_ms = <200>; };

&soft_off { hold-time-ms = <5000>; };

/ {
    combos {
        compatible = "zmk,combos";

        /* usually on base layer */

        qu {
            timeout-ms = <40>;
            key-positions = <2 1>;
            bindings = <&qu>;
            layers = <0>;
        };

        z {
            timeout-ms = <40>;
            key-positions = <19 18>;
            bindings = <&kp Z>;
            layers = <0>;
        };

        v {
            timeout-ms = <40>;
            key-positions = <1 0>;
            bindings = <&kp V>;
            layers = <0>;
        };

        q {
            timeout-ms = <40>;
            key-positions = <20 19>;
            bindings = <&kp Q>;
            layers = <0>;
        };

        /* parentheticals */

        lbrc {
            timeout-ms = <40>;
            key-positions = <0 9>;
            bindings = <&kp LBRC>;
        };

        lbkt {
            timeout-ms = <40>;
            key-positions = <10 1>;
            bindings = <&kp LBKT>;
        };

        lpar {
            timeout-ms = <40>;
            key-positions = <2 11>;
            bindings = <&kp LPAR>;
        };

        lt {
            timeout-ms = <40>;
            key-positions = <3 12>;
            bindings = <&kp LT>;
        };

        rbrc {
            timeout-ms = <40>;
            key-positions = <7 16>;
            bindings = <&kp RBRC>;
        };

        rbkt {
            timeout-ms = <40>;
            key-positions = <6 15>;
            bindings = <&kp RBKT>;
        };

        rpar {
            timeout-ms = <40>;
            key-positions = <5 14>;
            bindings = <&kp RPAR>;
        };

        gt {
            timeout-ms = <40>;
            key-positions = <4 13>;
            bindings = <&kp GT>;
        };

        /* caps */

        capsword {
            timeout-ms = <40>;
            key-positions = <14 11>;
            bindings = <&caps_word>;
        };

        /* deletion */

        bspc {
            timeout-ms = <40>;
            key-positions = <16 14 15>;
            bindings = <&kp BSPC>;
        };

        del {
            timeout-ms = <40>;
            key-positions = <11 10 9>;
            bindings = <&kp DEL>;
        };

        fwslash {
            bindings = <&kp SLASH>;
            key-positions = <22 23>;
            timeout-ms = <40>;
        };

        bkslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <22 21>;
            timeout-ms = <40>;
        };

        apos {
            bindings = <&kp APOS>;
            key-positions = <6 7>;
            timeout-ms = <40>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <6 5>;
            timeout-ms = <40>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <14 16>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <9 11>;
        };

        softoff {
            bindings = <&soft_off>;
            key-positions = <21 22 23>;
        };

        boot {
            bindings = <&bootloader>;
            key-positions = <20 19 18>;
        };

        lshift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <10 11>;
        };

        rshift {
            bindings = <&sk RIGHT_SHIFT>;
            key-positions = <14 15>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 2>;
        };

        delword {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <7 5>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <7 0>;
        };
    };
};

/ {
    behaviors {
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;

            // global-quick-tap;

            bindings = <&kp>, <&kp>;

            // opposite side hand keys

            hold-trigger-key-positions = <4 5 6 7 13 14 15 16 17 21 22 23 26 27>;
        };

        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;

            // global-quick-tap;

            bindings = <&kp>, <&kp>;

            // opposite side hand keys

            hold-trigger-key-positions = <0 1 2 3 8 9 10 11 12 18 19 20 24 25>;
        };

        dotcol: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COL";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comsem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_SEM";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

// zilpzalp key numbers
//     __________________________  __________________________
//    /     0  |  1  |  2  |  3  \/   4 |   5 |   6 |   7    \
// |  8  |  9  | 10  | 11  | 12  /\  13 |  14 |  15 |  16 | 17  |
//    \    18  | 19  | 20    /        \    21 |  22 |  23   /
//          \    24  | 25  /            \  26 |  27    /
//           --------------              --------------

/ {
    macros {
        qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
            label = "QU";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        aptmak {
            label = "APT";
	    bindings = <
				&kp W		&kp F		&kp P		&kp B			&kp J		&kp L		&kp U		&kp Y
		&hl LSHFT R	&hl LCTRL S	&hl LALT T	&hl LGUI H	&kp K			&kp X		&hr RGUI N	&hr LALT A	&hr RCTRL I	&hr RSHFT O
				&kp C		&kp G		&kp D							&kp M		&comsem		&dotcol

								&none		&lt 1 SPACE		&lt 2 E		&none			
	    >;
        };

        navigation {
            label = "NAV";
            bindings = <
				&kp LA(F4)	&kp LG(LEFT)	&kp LG(RIGHT)	&kp LC(W)		&kp PAGE_UP	&kp PRINTSCREEN		&kp UP			&kp HOME
		&kp LC(Z)	&kp LC(LS(T))	&kp LS(LC(TAB))	&kp LS(TAB)	&kp LC(A)		&kp PAGE_DOWN	&kp LEFT		&kp DOWN		&kp RIGHT	&kp END
				&kp LC(X)	&kp LC(C)	&mt LS(LC(V)) LS(INSERT)				&kp LC(LS(LEFT))	&kp LS(LC(RIGHT))	&kp LS(LC(UP_ARROW))

								&trans		&trans			&mo 2		&mo 2
            >;
        };

        symbols {
            label = "SYM";
	    bindings = <
				&kp EXCL	&kp AT_SIGN	&kp POUND	&kp DOLLAR		&kp EQUAL	&kp N1		&kp N2		&kp N3
		&kp SEMI	&kp STAR	&kp UNDER	&kp MINUS	&kp PIPE		&kp N0		&kp N4		&kp N5		&kp N6		&kp COLON
				&kp PLUS	&kp PERCENT	&kp AMPS						&kp N7		&kp N8		&kp N9

								&mo 1		&mo 1			&trans		&trans
	    >;
        };

        function {
            label = "FUN";
            bindings = <
         &kp F1  &kp F2  &kp F3  &kp F10  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
&kp F12  &kp F4  &kp F5  &kp F6  &kp F11  &out OUT_TOG  &kp C_PP      &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE
         &kp F7  &kp F8  &kp F9                         &soft_off     &bootloader   &bt BT_CLR
                         &trans  &trans   &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fun {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };
};

//     __________________________  __________________________
//    /     1  |  2  |  3  |  4  \/   5 |   6 |   7 |   8    \
// | 10  | 11  | 12  | 13  | 14  ||  15 |  16 |  17 |  18 | 19  |
//    \    20  | 21  | 22  |     ||     |  23 |  24 |  25   /
//                \    26  | 27  /\  28 |  29    /
//                 --------------  --------------
